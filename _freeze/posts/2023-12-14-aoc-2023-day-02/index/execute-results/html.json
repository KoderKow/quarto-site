{
  "hash": "f0e9c573b028d22ea296e7d81ee0e61b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Advent of Code: 2023 Day 2\"\ndescription: \"\"\nauthor:\n  - name: Kyle Harris\n    url: https://koderkow.com/\ndate: 2023-12-13\ncategories: [R, Advent of Code 2023] # self-defined categories\nimage: https://www.smarty.com/img/1600-900-Advent-of-Code-2023.png\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\nexecute:\n  warning: false\n---\n\n\n# Intro\n\n[Day 2 of AOC 2023](https://adventofcode.com/2023/day/2)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(aocr)\nlibrary(tidyverse)\nlibrary(printr)\n\nd_init <- aoc_get_data_as_tibble(2023, 2)\n```\n:::\n\n\n# Part 1\n\n## Play-by-play\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(d_init)\n```\n\n::: {.cell-output-display}\n\n\n|col_1                                                                                                                              |\n|:----------------------------------------------------------------------------------------------------------------------------------|\n|Game 1: 20 green, 3 red, 2 blue; 9 red, 16 blue, 18 green; 6 blue, 19 red, 10 green; 12 red, 19 green, 11 blue                     |\n|Game 2: 12 green, 3 blue, 16 red; 6 red, 4 blue, 12 green; 11 green, 4 red, 3 blue; 8 green, 15 red, 5 blue                        |\n|Game 3: 13 blue, 4 red, 8 green; 2 green, 4 red, 19 blue; 5 blue; 10 blue, 6 green, 2 red; 19 blue; 8 blue, 6 red                  |\n|Game 4: 14 green, 8 blue, 10 red; 11 green, 7 blue, 8 red; 8 green, 18 blue, 11 red                                                |\n|Game 5: 7 red, 7 green, 1 blue; 2 red, 1 green, 2 blue; 2 blue, 7 green; 7 red, 3 blue, 11 green                                   |\n|Game 6: 3 green, 1 red, 3 blue; 5 green, 19 red, 8 blue; 7 red, 2 green, 10 blue; 1 blue, 1 green, 12 red; 6 blue, 1 green, 16 red |\n:::\n:::\n\n\n- Lets use the first row/game as an example. After this is figured out we can wrap it into a function to execute against each row.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngame <- d_init[[1]][1]\n\ngame\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Game 1: 20 green, 3 red, 2 blue; 9 red, 16 blue, 18 green; 6 blue, 19 red, 10 green; 12 red, 19 green, 11 blue\"\n```\n\n\n:::\n:::\n\n\n- Separate the game text\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsplit_init <- str_split(unlist(game), \": \")[[1]]\n\nsplit_init\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Game 1\"                                                                                                \n[2] \"20 green, 3 red, 2 blue; 9 red, 16 blue, 18 green; 6 blue, 19 red, 10 green; 12 red, 19 green, 11 blue\"\n```\n\n\n:::\n:::\n\n\n- Store the game ID\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngame_id <-\n  split_init[1] %>%\n  str_remove(\"Game \") %>%\n  as.numeric()\n\ngame_id\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n- Use `str_split()` on the second object to separate into sets\n- Clear out extra white spaces with `str_squish()`\n- Transform it back into a tibble\n- Add a **set_id** to keep track of what set the values are from for future aggregation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_1 <-\n  str_split(split_init[2], \";\")[[1]] %>%\n  str_squish() %>%\n  as_tibble() %>%\n  mutate(\n    set_id = row_number()\n  )\n\nd_1\n```\n\n::: {.cell-output-display}\n\n\n|value                     | set_id|\n|:-------------------------|------:|\n|20 green, 3 red, 2 blue   |      1|\n|9 red, 16 blue, 18 green  |      2|\n|6 blue, 19 red, 10 green  |      3|\n|12 red, 19 green, 11 blue |      4|\n:::\n:::\n\n\n- Turn the value column into separate rows based on the comma delim\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_2 <- \n  d_1 %>% \n  separate_longer_delim(value, delim = \", \")\n\nd_2\n```\n\n::: {.cell-output-display}\n\n\n|value    | set_id|\n|:--------|------:|\n|20 green |      1|\n|3 red    |      1|\n|2 blue   |      1|\n|9 red    |      2|\n|16 blue  |      2|\n|18 green |      2|\n|6 blue   |      3|\n|19 red   |      3|\n|10 green |      3|\n|12 red   |      4|\n|19 green |      4|\n|11 blue  |      4|\n:::\n:::\n\n\n- Separate the number and color from the **value** column\n- Use `convert = TRUE` to auto-coerce data types\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_3 <- \n  d_2 %>% \n  separate(\n    col = value,\n    into = c(\"n\", \"color\"),\n    sep = \" \",\n    convert = TRUE\n  ) \n\nd_3\n```\n\n::: {.cell-output-display}\n\n\n|  n|color | set_id|\n|--:|:-----|------:|\n| 20|green |      1|\n|  3|red   |      1|\n|  2|blue  |      1|\n|  9|red   |      2|\n| 16|blue  |      2|\n| 18|green |      2|\n|  6|blue  |      3|\n| 19|red   |      3|\n| 10|green |      3|\n| 12|red   |      4|\n| 19|green |      4|\n| 11|blue  |      4|\n:::\n:::\n\n\n- Group by set and color to get the total counts\n- The summarize is likely not needed, but I added it just incase there was more than one color shown in a set\n- Get the result by checking to see if the color counts are less than or equal to the amounts given in the problem\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_4 <- \n  d_3 %>% \n  group_by(set_id, color) %>%\n  summarize(\n    n = sum(n),\n    .groups = \"drop\"\n  ) %>%\n  mutate(\n    result = case_when(\n      color == \"red\" & n <= 12 ~ TRUE,\n      color == \"green\" & n <= 13 ~ TRUE,\n      color == \"blue\" & n <= 14 ~ TRUE,\n      TRUE ~ FALSE\n    )\n  )\n\nd_4\n```\n\n::: {.cell-output-display}\n\n\n| set_id|color |  n|result |\n|------:|:-----|--:|:------|\n|      1|blue  |  2|TRUE   |\n|      1|green | 20|FALSE  |\n|      1|red   |  3|TRUE   |\n|      2|blue  | 16|FALSE  |\n|      2|green | 18|FALSE  |\n|      2|red   |  9|TRUE   |\n|      3|blue  |  6|TRUE   |\n|      3|green | 10|TRUE   |\n|      3|red   | 19|FALSE  |\n|      4|blue  | 11|TRUE   |\n|      4|green | 19|FALSE  |\n|      4|red   | 12|TRUE   |\n:::\n:::\n\n\n- If all results are `TRUE`, return the game_id. This is needed to summarize for the final answer\n- If not all results are not `TRUE`, return a 0. This will represent a game ID we want to ignore\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (all(d_4$result)) {\n  result <- game_id\n} else {\n  result <- 0\n}\n\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n## Functionize it\n\n::: {.cell}\n\n```{.r .cell-code}\nday_2_part_1 <- function(game) {\n  split_init <- str_split(unlist(game), \": \")[[1]]\n  \n  game_id <- split_init[1] %>%\n    str_remove(\"Game \") %>%\n    as.numeric()\n  \n  d <-\n    str_split(split_init[2], \";\")[[1]] %>%\n    str_squish() %>%\n    as_tibble() %>%\n    mutate(\n      set_id = row_number()\n    ) %>%\n    separate_longer_delim(value, delim = \", \") %>%\n    separate(\n      col = value,\n      into = c(\"n\", \"color\"),\n      sep = \" \",\n      convert = TRUE\n    ) %>%\n    group_by(set_id, color) %>%\n    summarize(\n      n = sum(n),\n      .groups = \"drop\"\n    ) %>%\n    mutate(\n      result = case_when(\n        color == \"red\" & n <= 12 ~ TRUE,\n        color == \"green\" & n <= 13 ~ TRUE,\n        color == \"blue\" & n <= 14 ~ TRUE,\n        TRUE ~ FALSE\n      )\n    )\n  \n  if (all(d$result)) {\n    result <- game_id\n  } else {\n    result <- 0\n  }\n  \n  return(result)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nv_res <- \n  d_init %>%\n  group_split(row_id = row_number()) %>%\n  map_int(day_2_part_1)\n\nhead(v_res)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0 0 0 0 5 0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(v_res)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2545\n```\n\n\n:::\n:::\n\n\n# Part 2\n\n> As you continue your walk, the Elf poses a second question: in each game you played, what is the fewest number of cubes of each color that could have been in the bag to make the game possible?\n\n- For this we will need to look at each game and get the max `n` by color then take the **product**, or they call it power, of the 3 numbers\n- I will modify the `summarize` to take the max n by **color** then use the `prod` function to multiply them together\n\n\n::: {.cell}\n\n```{.r .cell-code}\nday_2_part_2 <- function(game) {\n  split_init <- str_split(unlist(game), \": \")[[1]]\n  game_id <- split_init[1] %>%\n    str_remove(\"Game \") %>%\n    as.numeric()\n  d <-\n    str_split(split_init[2], \";\")[[1]] %>%\n    str_squish() %>%\n    as_tibble() %>%\n    mutate(\n      set_id = row_number()\n    ) %>%\n    separate_longer_delim(value, delim = \", \") %>%\n    separate(\n      col = value,\n      into = c(\"n\", \"color\"),\n      sep = \" \",\n      convert = TRUE\n    ) %>%\n    group_by(color) %>%\n    summarize(\n      n = max(n),\n      .groups = \"drop\"\n    )\n  \n  result <- prod(d$n)\n  \n  return(result)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nd_init %>%\n  group_split(set_id = row_number()) %>%\n  map_int(day_2_part_2) %>%\n  sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 78111\n```\n\n\n:::\n:::\n\n\n# Sources\n\n- Header image from <https://www.smarty.com/img/1600-900-Advent-of-Code-2023.png>\n\n# Session info\n\n\n::: {.cell}\n::: {.cell-output-display}\n<details closed>\n<summary> <span title='Click to Expand'> Click for session info </span> </summary>\n\n```r\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.1 (2023-06-16 ucrt)\n os       Windows 10 x64 (build 19045)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_United States.utf8\n ctype    English_United States.utf8\n tz       America/Chicago\n date     2023-12-17\n pandoc   3.1.1 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package     * version    date (UTC) lib source\n P aocr        * 0.0.0.9000 2023-12-09 [?] Github (koderkow/aocr@24fd057)\n P backports     1.4.1      2021-12-13 [?] RSPM (R 4.3.0)\n P bit           4.0.5      2022-11-15 [?] CRAN (R 4.3.1)\n P bit64         4.0.5      2020-08-30 [?] CRAN (R 4.3.1)\n P checkmate     2.3.1      2023-12-04 [?] CRAN (R 4.3.2)\n P cli           3.6.1      2023-03-23 [?] RSPM (R 4.3.0)\n P clipr         0.8.0      2022-02-22 [?] CRAN (R 4.3.1)\n P colorspace    2.1-0      2023-01-23 [?] CRAN (R 4.3.1)\n P crayon        1.5.2      2022-09-29 [?] RSPM (R 4.3.0)\n P curl          5.0.2      2023-08-14 [?] CRAN (R 4.3.1)\n P desc          1.4.2      2022-09-08 [?] RSPM (R 4.3.0)\n P details     * 0.3.0      2022-03-27 [?] RSPM (R 4.3.0)\n P digest        0.6.33     2023-07-07 [?] RSPM (R 4.3.0)\n P dplyr       * 1.1.2      2023-04-20 [?] CRAN (R 4.3.1)\n P evaluate      0.21       2023-05-05 [?] CRAN (R 4.3.1)\n P fansi         1.0.4      2023-01-22 [?] CRAN (R 4.3.1)\n P fastmap       1.1.1      2023-02-24 [?] CRAN (R 4.3.1)\n P forcats     * 1.0.0      2023-01-29 [?] CRAN (R 4.3.1)\n P generics      0.1.3      2022-07-05 [?] CRAN (R 4.3.1)\n P ggplot2     * 3.4.3      2023-08-14 [?] CRAN (R 4.3.1)\n P glue          1.6.2      2022-02-24 [?] RSPM (R 4.3.0)\n P gtable        0.3.4      2023-08-21 [?] CRAN (R 4.3.1)\n P hms           1.1.3      2023-03-21 [?] CRAN (R 4.3.1)\n P htmltools     0.5.6      2023-08-10 [?] CRAN (R 4.3.1)\n P httr          1.4.7      2023-08-15 [?] CRAN (R 4.3.1)\n P httr2         0.2.3      2023-05-08 [?] CRAN (R 4.3.1)\n P jsonlite      1.8.7      2023-06-29 [?] CRAN (R 4.3.1)\n P knitr         1.43       2023-05-25 [?] CRAN (R 4.3.1)\n P lifecycle     1.0.3      2022-10-07 [?] RSPM (R 4.3.0)\n P lubridate   * 1.9.2      2023-02-10 [?] CRAN (R 4.3.1)\n P magrittr      2.0.3      2022-03-30 [?] RSPM (R 4.3.0)\n P munsell       0.5.0      2018-06-12 [?] CRAN (R 4.3.1)\n P pillar        1.9.0      2023-03-22 [?] CRAN (R 4.3.1)\n P pkgconfig     2.0.3      2019-09-22 [?] CRAN (R 4.3.1)\n P png           0.1-8      2022-11-29 [?] RSPM (R 4.3.0)\n P printr      * 0.3        2023-03-08 [?] CRAN (R 4.3.2)\n P purrr       * 1.0.2      2023-08-10 [?] RSPM (R 4.3.0)\n P R6            2.5.1      2021-08-19 [?] RSPM (R 4.3.0)\n P rappdirs      0.3.3      2021-01-31 [?] CRAN (R 4.3.1)\n P readr       * 2.1.4      2023-02-10 [?] CRAN (R 4.3.1)\n   renv          1.0.3      2023-09-19 [1] CRAN (R 4.3.2)\n P rlang         1.1.1      2023-04-28 [?] RSPM (R 4.3.0)\n P rmarkdown     2.24       2023-08-14 [?] CRAN (R 4.3.1)\n P rprojroot     2.0.3      2022-04-02 [?] RSPM (R 4.3.0)\n P rstudioapi    0.15.0     2023-07-07 [?] CRAN (R 4.3.1)\n P scales        1.2.1      2022-08-20 [?] CRAN (R 4.3.1)\n P sessioninfo   1.2.2      2021-12-06 [?] RSPM (R 4.3.0)\n P stringi       1.7.12     2023-01-11 [?] RSPM (R 4.3.0)\n P stringr     * 1.5.0      2022-12-02 [?] RSPM (R 4.3.0)\n P tibble      * 3.2.1      2023-03-20 [?] CRAN (R 4.3.1)\n P tidyr       * 1.3.0      2023-01-24 [?] CRAN (R 4.3.1)\n P tidyselect    1.2.0      2022-10-10 [?] CRAN (R 4.3.1)\n P tidyverse   * 2.0.0      2023-02-22 [?] CRAN (R 4.3.1)\n P timechange    0.2.0      2023-01-11 [?] CRAN (R 4.3.1)\n P tzdb          0.4.0      2023-05-12 [?] CRAN (R 4.3.1)\n P utf8          1.2.3      2023-01-31 [?] CRAN (R 4.3.1)\n P vctrs         0.6.3      2023-06-14 [?] CRAN (R 4.3.1)\n P vroom         1.6.3      2023-04-28 [?] CRAN (R 4.3.1)\n P withr         2.5.0      2022-03-03 [?] CRAN (R 4.3.1)\n P xfun          0.40       2023-08-09 [?] RSPM (R 4.3.0)\n P xml2          1.3.5      2023-07-06 [?] RSPM (R 4.3.0)\n P yaml          2.3.7      2023-01-23 [?] RSPM (R 4.3.0)\n\n [1] C:/Users/kypap/Documents/projects/quarto-site/renv/library/R-4.3/x86_64-w64-mingw32\n [2] C:/Users/kypap/AppData/Local/R/cache/R/renv/sandbox/R-4.3/x86_64-w64-mingw32/bd3f13aa\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────\n\n```\n\n</details>\n<br>\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}